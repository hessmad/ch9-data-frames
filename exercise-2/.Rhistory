# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- c(paste("employee", 1:100))
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- c(paste("Employee", 1:100))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- salaries_2017 + runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salaries_2018, stringsAsFactors=FALSE)
salaries <- data.frame(employees,
salaries_2017,
salaries_2018,
stringsAsFactors=FALSE)
view(salaries)
View(salaries)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- salaries_2018 - salaries_2017
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
got_raise <- salaries$change > 0
got_raise
# How many employees got a raise?
nrow(salaries[salaries$got_raise = TRUE])
# How many employees got a raise?
nrow(salaries[salaries$got_raise = TRUE])
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE])
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
USPersonalExpenditure
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(data.frame(USPersonalExpenditure))
# What are the column names of your dataframe?
colnames(personal_expenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
personal_expenditure <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(personal_expenditure)
# What are the row names of your dataframe?
rownames(personal_expenditure)
View(personal_expenditure)
# Add a column "category" to your data frame that contains the rownames
?colnames
# Add a column "category" to your data frame that contains the rownames
categories <- rownames(personal_expenditure)
personal_expenditure$new.col <- categories
personal_expenditure$Categories <- categories
personal_expenditure$Category <- categories
data("USPersonalExpenditure")
USPersonalExpenditure
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
personal_expenditure <- data.frame(USPersonalExpenditure)
View(personal_expenditure)
# What are the column names of your dataframe?
colnames(personal_expenditure)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
rownames(personal_expenditure)
# Add a column "category" to your data frame that contains the rownames
categories <- rownames(personal_expenditure)
personal_expenditure$Category <- categories
# How much money was spent on personal care in 1940?
personal_expenditure$X1940[4]
# How much money was spent on Food and Tobacco in 1960?
personal_expenditure$X1960[1]
# What was the highest expenditure category in 1960?
max(personal_expenditure$X1960)
lowest_category <- function(year) {
col <- paste0('X', year)
personal_expenditure$Category[personal_expenditure[, col]] == min(personal_expenditure$col)
}
lowest_category(1960)
personal_expenditure$Category[personal_expenditure[, col]] == min(personal_expenditure[, col])
lowest_category <- function(year) {
col <- paste0('X', year)
personal_expenditure$Category[personal_expenditure[, col]] == min(personal_expenditure[, col])
}
lowest_category(1960)
personal_expenditure$Category[personal_expenditure[, col] == min(personal_expenditure[, col])]
lowest_category <- function(year) {
col <- paste0('X', year)
personal_expenditure$Category[personal_expenditure[, col] == min(personal_expenditure[, col])]
}
lowest_category(1960)
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(lowest_category(personal_expenditure[1:5]))
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(lowest_category(personal_expenditure(1940, 1960, 5)))
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
?sapply
personal_expenditure['Personal Care', 1940]
personal_expenditure['Personal Care', X1940]
personal_expenditure['Personal Care', 'X1940']
sapply(personal_expenditure[1:5], lowest_category)
personal_expenditure$Category[personal_expenditure$X1960 == max(personal_expenditure$X1960)]
sapply(personal_expenditure[1:5], lowest_category)
lowest_category <- function(year) {
col <- paste0('X', year)
personal_expenditure$Category[personal_expenditure[, col] == min(personal_expenditure[, col])]
}
sapply(personal_expenditure[1:5], lowest_category)
sapply(seq(1940, 1960, 5), lowest_category)
